{"version":3,"sources":["logo.svg","movies_comps/search.js","movies_comps/moviesItem.js","movies_comps/omdbApi.js","movies_comps/darkBox.js","movies_comps/appMovies.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","props","searchInput","useRef","useState","inputLocation","setInputLocation","className","ref","onInput","current","value","setUserInput","type","placeholder","MoviesItem","item","onClick","setOpenDark","setImdbID","imdbID","style","backgroundImage","Poster","Title","Year","OMDbApi","movies_arr","setMoviesArr","url","userInput","useEffect","fetch","then","resp","json","data","console","log","catch","err","alert","Response","map","key","Error","DarkBox","imd","setImd","plot","setPlot","read","setRead","Plot","substring","id","src","AppMoives","openDark","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,kC,oHCiD5BC,MA9Cf,SAAgBC,GACZ,IAAIC,EAAcC,mBADC,EAEqBC,mBAAS,uBAF9B,mBAEdC,EAFc,KAECC,EAFD,KAcnB,OACI,yBAAKC,UAAU,aAEX,yBAAKA,UAAWF,GACZ,yBAAKE,UAAU,YACX,wBAAIA,UAAU,kCAAd,oBACA,2BAAOC,IAAKN,EAAaO,QAhBzB,WACsB,KAA9BP,EAAYQ,QAAQC,MACpBL,EAAiB,uBAGjBA,EAAiB,oBAErBL,EAAMW,aAAaV,EAAYQ,QAAQC,QASgBE,KAAK,OAAOC,YAAY,aAAaP,UAAU,2CCI/FQ,MA1Bf,SAAoBd,GAChB,IAAIe,EAAOf,EAAMe,KAEjB,OACI,yBAAKT,UAAU,sBACX,yBAAKA,UAAU,OACfU,QAAS,WACLhB,EAAMiB,aAAY,GAClBjB,EAAMkB,UAAUH,EAAKI,UAIrB,yBAAKb,UAAU,MAAMc,MAAO,CAAEC,gBAAgB,OAAD,OAASN,EAAKO,OAAd,QAC7C,yBAAKhB,UAAU,aACX,wBAAIA,UAAU,cAAcS,EAAKQ,OACjC,yBAAKjB,UAAU,aAAaS,EAAKS,UCqBtCC,MAnCf,SAAiBzB,GAAQ,IAAD,EACaG,mBAAS,IADtB,mBACfuB,EADe,KACHC,EADG,KAGhBC,EAAM,6BAA+B5B,EAAM6B,UAAY,mBAe3D,OAdAC,qBAAU,WACNC,MAAMH,GACDI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZR,EAAaQ,MAEhBG,OAAM,SAAAC,GACHC,MAAM,YAAcD,GACpBH,QAAQC,IAAIE,QAGrB,CAACvC,EAAM6B,YAIN,yBAAKvB,UAAU,aACX,yBAAKA,UAAU,YACe,SAAxBoB,EAAWe,SAAuBf,EAAW3B,OAAO2C,KAAI,SAAA3B,GACtD,OACI,kBAAC,EAAD,CAAY4B,IAAK5B,EAAKI,OAAQJ,KAAMA,EAAMG,UAAWlB,EAAMkB,UAAWD,YAAajB,EAAMiB,iBAEnE,KAApBjB,EAAM6B,UAAoB,wBAAIvB,UAAU,eAAeoB,EAAWkB,OAAc,MC6B3FC,MAxDf,SAAiB7C,GAAO,MAEAG,mBAAS,MAFT,mBAEf2C,EAFe,KAEVC,EAFU,OAGE5C,oBAAS,GAHX,mBAGf6C,EAHe,KAGTC,EAHS,OAIE9C,mBAAS,QAJX,mBAIf+C,EAJe,KAITC,EAJS,KA+BpB,OAxBArB,qBAAU,WAEN,IAAIF,EAAM,6BAA+B5B,EAAMmB,OAAS,mBACxDY,MAAMH,GACDI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZY,EAAOZ,GACPc,EAAQd,EAAKiB,KAAKC,UAAU,EAAG,UAGxC,CAACrD,EAAMmB,SAEVW,qBAAU,WAEFqB,EADAH,EACQ,OAGA,UAGb,CAACA,IAIA,yBAAKM,GAAG,UAAUhD,UAAU,+BACxB,yBAAKA,UAAU,2BACX,yBAAKU,QAAS,WAAQhB,EAAMiB,aAAY,KAClC6B,EAAO,6BAAK,yBAAKS,IAAKT,EAAIxB,SACxB,4BAAKwB,EAAIvB,OACT,4BAAKuB,EAAItB,MACT,2BAAKwB,EAAQ,2BAAIF,EAAIM,KAAKC,UAAU,EAAG,KAEjC,2BAAIP,EAAIM,QAIT,IAGb,4BAAQ9C,UAAU,mBAAmBU,QAAS,WAAQiC,GAASD,KAAUE,MC9B1EM,MAdf,SAAmBxD,GAAQ,IAAD,EACUG,mBAAS,IADnB,mBACjB0B,EADiB,KACNlB,EADM,OAEIR,mBAAS,IAFb,mBAEjBgB,EAFiB,KAETD,EAFS,OAGMf,oBAAS,GAHf,mBAGjBsD,EAHiB,KAGPxC,EAHO,KAKtB,OACI,6BACKwC,GAAY,kBAAC,EAAD,CAAStC,OAAQA,EAAQF,YAAaA,IACnD,kBAAC,EAAD,CAAQN,aAAcA,IACtB,kBAAC,EAAD,CAASkB,UAAWA,EAAWX,UAAWA,EAAWD,YAAaA,MCA/DyC,MARf,WACE,OACE,yBAAKpD,UAAU,OACd,kBAAC,EAAD,QCIeqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.d524ee13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useRef, useState } from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n// import { TextField, InputAdornment, IconButton } from '@material-ui/core';\r\nfunction Search(props) {\r\n    let searchInput = useRef()\r\n    let [inputLocation, setInputLocation] = useState(\"css_searchBoxCenter\")\r\n\r\n    const onInput = () => {\r\n        if (searchInput.current.value === \"\") {\r\n            setInputLocation(\"css_searchBoxCenter\")\r\n        }\r\n        else {\r\n            setInputLocation(\"css_searchBoxTop\")\r\n        }\r\n        props.setUserInput(searchInput.current.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            \r\n            <div className={inputLocation}>\r\n                <div className=\"col-lg-9\">\r\n                    <h1 className=\" text-center text-primary mb-3\">OMDb search site</h1>\r\n                    <input ref={searchInput} onInput={onInput} type=\"text\" placeholder=\"search ...\" className=\"form-control w-100 searchBox_input\" />\r\n                </div>\r\n                {/* <input ref={searchInput} onInput={onInput} type=\"text\" placeholder=\"search ...\" className=\"form-control w-75 searchBox_input\" /> */}\r\n\r\n                {/* <TextField\r\n                    ref={searchInput}\r\n                    variant=\"outlined\"\r\n                    onChange={onInput}\r\n                    className=\"searchBox_input rounded-circle\"\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment >\r\n                                <IconButton>\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        )\r\n                    }}\r\n                /> */}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react';\r\nfunction MoviesItem(props) {\r\n    let item = props.item;\r\n\r\n    return (\r\n        <div className=\"p-2 col-lg-3 col-6\">\r\n            <div className=\"card\"\r\n            onClick={() => {\r\n                props.setOpenDark(true);\r\n                props.setImdbID(item.imdbID);\r\n            }}\r\n            >\r\n                {/* <img className=\"card-img-top\" src={item.Poster} alt=\"Card image cap\" /> */}\r\n                <div className=\"pic\" style={{ backgroundImage: `url(${item.Poster})` }}></div>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{item.Title}</h5>\r\n                    <div className=\"card-text\">{item.Year}</div>\r\n                    {/* <button onClick={() => {\r\n                        props.setOpenDark(true);\r\n                        props.setImdbID(item.imdbID);\r\n                    }} className=\"btn btn-info mt-3\">More info</button> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoviesItem\r\n","import React, { useState, useEffect } from 'react';\r\nimport MoviesItem from './moviesItem';\r\nfunction OMDbApi(props) {\r\n    let [movies_arr, setMoviesArr] = useState([]);\r\n    \r\n    let url = \"http://www.omdbapi.com/?s=\" + props.userInput + \"&apikey=5a292f28\";\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setMoviesArr(data)\r\n            })\r\n            .catch(err => {\r\n                alert(\"testing: \" + err);\r\n                console.log(err);\r\n\r\n            })\r\n    }, [props.userInput])\r\n\r\n    return (\r\n\r\n        <div className=\"container\">\r\n            <div className=\"row mt-3\">\r\n                {(movies_arr.Response === \"True\") ? movies_arr.Search.map(item => {\r\n                    return (\r\n                        <MoviesItem key={item.imdbID} item={item} setImdbID={props.setImdbID} setOpenDark={props.setOpenDark} />\r\n                    )\r\n                    }) : (props.userInput !== \"\") ? <h3 className=\"text-danger\">{movies_arr.Error}</h3> : \"\"\r\n                    // }) :(props.userInput !==\"\")? \"Not Found\":\"\"\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OMDbApi\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nfunction DarkBox(props) {\r\n    // alert(props.imdbID)\r\n    let [imd, setImd] = useState(null);\r\n    let [plot, setPlot] = useState(true);\r\n    let [read, setRead] = useState(\"more\");\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let url = \"http://www.omdbapi.com/?i=\" + props.imdbID + \"&apikey=5a292f28\"\r\n        fetch(url)\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setImd(data)\r\n                setPlot(data.Plot.substring(0, 50))\r\n\r\n            })\r\n    }, [props.imdbID])\r\n\r\n    useEffect(() => {\r\n        if (plot) {\r\n            setRead(\"more\");\r\n        }\r\n        else {\r\n            setRead(\"less\");\r\n        }\r\n\r\n    }, [plot])\r\n\r\n\r\n    return (\r\n        <div id=\"id_dark\" className=\"dark container-fluid center\" >\r\n            <div className=\"dark_inside text-center\">\r\n                <div onClick={() => { props.setOpenDark(false); }}>\r\n                    {(imd) ? <div><img src={imd.Poster} />\r\n                        <h2>{imd.Title}</h2>\r\n                        <h2>{imd.Year}</h2>\r\n                        <p>{(plot) ? <p>{imd.Plot.substring(0, 50)}\r\n                        </p>\r\n                            : <p>{imd.Plot}</p>}\r\n                        </p>\r\n                        {/* <p className=\"text-primary\" onClick={() => { setPlot(!plot) }}>{read}</p> */}\r\n\r\n                    </div> : \"\"}\r\n\r\n                </div>\r\n                <button className=\" btn btn-primary\" onClick={() => { setPlot(!plot) }}>{read}</button>\r\n                {/* <button className=\"btn btn-danger sm-3\" onClick={() => {\r\n                    props.setOpenDark(false);\r\n                }}>Close</button> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DarkBox\r\n","import React, { useState } from 'react';\r\nimport Search from './search';\r\nimport OMDbApi from './omdbApi';\r\nimport DarkBox from './darkBox';\r\nfunction AppMoives(props) {\r\n    let [userInput, setUserInput] = useState(\"\")\r\n    let [imdbID, setImdbID] = useState(\"\")\r\n    let [openDark, setOpenDark]=useState(false);\r\n\r\n    return (\r\n        <div >\r\n            {openDark && <DarkBox imdbID={imdbID} setOpenDark={setOpenDark}/>}\r\n            <Search setUserInput={setUserInput} />\r\n            <OMDbApi userInput={userInput} setImdbID={setImdbID} setOpenDark={setOpenDark}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppMoives","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport AppMoives from './movies_comps/appMovies';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <AppMoives/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}