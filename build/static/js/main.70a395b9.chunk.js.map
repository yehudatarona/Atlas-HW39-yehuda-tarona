{"version":3,"sources":["atlas_comps/header.js","atlas_comps/nav.js","services/apiService.js","atlas_comps/appMap.js","atlas_comps/CountryItem.js","atlas_comps/main.js","atlas_comps/appAtlas.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Nav","searchInput","useRef","history","useHistory","to","ref","type","placeholder","onClick","current","value","alert","push","doApiGet","_url","a","fetch","resp","json","data","AppMap","item","Map","center","latlng","zoom","TileLayer","url","attribution","Marker","position","CountryItem","borders","temp_ar","allState_arr","filter","indexOf","alpha3Code","console","log","style","backgroundImage","flag","name","population","region","languages","iso639_2","currencies","code","capital","map","i","key","Main","useState","state_arr","setStateArr","setAllStateArr","countryName","useEffect","match","params","countryCode","then","catch","err","AppAtlas","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.70a395b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../css_comps/atlas.css\"\r\nfunction Header(props){\r\n  return(\r\n    <header  className=\"container d-flex align-items-end  text-center justify-content-center\"> \r\n    {/* <h1 className =\"display-3 \">Country Info</h1> */}\r\n     \r\n    </header> \r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useRef, useEffect } from 'react';\r\nimport { Link, NavLink,useHistory } from \"react-router-dom\"\r\nimport \"../css_comps/atlas.css\"\r\n\r\n\r\n\r\nfunction Nav(props) {\r\n    const searchInput = useRef();\r\n    let history = useHistory();\r\n\r\n    const searchBtn = ()=>{\r\n\r\n        if(searchInput.current.value ===\"\"){\r\n            alert(\"Please a Country name Courtry in the search field\")\r\n        }\r\n        else{\r\n            // props.setName(searchInput.current.value);\r\n            history.push(\"/country/\" + searchInput.current.value);\r\n            searchInput.current.value =\"\";\r\n        } \r\n    }\r\n\r\n    \r\n    return (\r\n        <nav className=\"container  text-white d-flex align-items-center justify-content-between backg\">\r\n            <div className=\"row\">\r\n                <Link to={\"/country/USA\"} className=\"text-decoration-none\">USA</Link>\r\n                <Link to={\"/country/israel\"} className=\"text-decoration-none\">ISRAEL</Link>\r\n                <Link to={\"/country/UK\"} className=\"text-decoration-none\">UK</Link>\r\n                <Link to={\"/country/France\"} className=\"text-decoration-none\">FRANCE</Link>\r\n                <Link to={\"/country/Thailand\"} className=\"text-decoration-none\">THAILAND</Link>\r\n                <Link to={\"/country/Japan\"} className=\"text-decoration-none\">JAPAN</Link>\r\n                <Link to={\"/country/Brazil\"} className=\"text-decoration-none\">BRAZIL</Link>\r\n                <Link to={\"/country/Ethiopia\"} className=\"text-decoration-none\">ETHIOPA</Link>\r\n                <Link to={\"/country/China\"} className=\"text-decoration-none\">CHINA</Link>\r\n            </div>\r\n                <div className=\"float-right\">\r\n                    <div className=\"row \">\r\n                        <input ref={searchInput} type=\"text\" placeholder=\"Search...\" className=\"col-lg-8 form-control\" />\r\n                        {/* <Link to={\"/\"+props.name} onClick={searchBtn}className=\"btn btn-success h-25\">Search</Link> */}\r\n                        <button  onClick={searchBtn}className=\"btn btn-info h-25\">Search</button>\r\n                    </div>\r\n                </div>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","let localUrl = \"http://localhost:3000/\";\r\n// let realUrl = \"https://restcountries.eu/rest/v2/all\"\r\nlet realUrl = \"https://restcountries.eu/rest/v2/name/\"\r\nexport const apiUrl = realUrl;\r\n\r\nexport let perPage = 4;\r\n\r\nexport const doApiGet = async (_url) => {\r\n    let resp = await fetch(_url);\r\n    let data = await resp.json();\r\n    //console.log(\"doApiGst\",data);\r\n    return data;\r\n}\r\n\r\nexport const doApiPost = async (_url, _body) => {\r\n    let resp = await fetch(_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(_body),\r\n        headers: {\r\n            'content-type': \"application/json\"\r\n        }\r\n    })\r\n    let data = await resp.json()\r\n    console.log(\"service say:\" ,data)\r\n    return data;\r\n}\r\n\r\n\r\nexport const doApiPostToken = async (_url, _body) => {\r\n    let resp = await fetch(_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(_body),\r\n        headers: {\r\n            'content-type': \"application/json\",\r\n            'x-auth-token':localStorage[\"tok\"]\r\n        }\r\n    })\r\n    let data = await resp.json()\r\n    console.log(\"service say:\" ,data)\r\n    return data;\r\n}\r\n","import React from 'react';\r\nimport { Map, Marker, TileLayer } from 'react-leaflet';\r\nimport \"../css_comps/atlas.css\"\r\n\r\n\r\n\r\nfunction AppMap(props){\r\n    let item =props.item;\r\n\r\n  return(\r\n    <div className=\"mt-2 map col\">\r\n      <Map  center={[item.latlng[0], item.latlng[1]]} zoom={4}>\r\n            <TileLayer \r\n              url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            <Marker \r\n              position={[item.latlng[0], item.latlng[1]]}\r\n            />\r\n          </Map>\r\n     </div> \r\n  )\r\n}\r\n\r\nexport default AppMap\r\n","import React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\"\r\nimport AppMap from './appMap';\r\nimport \"../css_comps/atlas.css\"\r\nfunction CountryItem(props) {\r\n\r\n    let item = props.item;\r\n    let borders = item.borders;\r\n\r\n    let temp_ar = props.allState_arr.filter(item => {\r\n        return (borders.indexOf(item.alpha3Code) > -1)\r\n    })\r\n\r\n    console.log(\"state\", item);\r\n    return (\r\n        <div>\r\n            <div className=\"row\" >\r\n                {/* <img className=\"float-left mr-2\" src={item.flag} alt=\"Card image cap\" height=\"200\" /> */}\r\n                <div className=\"float-left mr-2 pic\" style={{ backgroundImage: `url(${item.flag})` }}></div>\r\n                <div className=\"col\">\r\n                    <h3 >{item.name}</h3>\r\n                    <div >populatio: {item.population}</div>\r\n                    <div >Region: {item.region}</div>\r\n                    <div >Lenguage: {item.languages[0].iso639_2}, {item.languages[0].name} </div>\r\n                    <div >Coin: {item.currencies[0].code}, {item.currencies[0].name}</div>\r\n                    <div >Capital: {item.capital}</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row mt-2 \" >\r\n                <AppMap item={item} />\r\n                <div className=\"col\">\r\n                    <h3>States with borders</h3>\r\n                    <div className=\"row pl-3\">\r\n                        {temp_ar.map((item, i) => {\r\n                            return (\r\n                                <div key={i}>\r\n                                    <Link className=\"mr-1\"  to={\"/code/\" + item.alpha3Code} >{item.name}</Link>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default CountryItem","import React, { useState, useEffect } from 'react';\r\nimport { doApiGet, apiUrl } from '../services/apiService';\r\nimport CountryItem from './CountryItem';\r\n\r\n\r\n\r\n\r\nfunction Main(props) {\r\n    let [state_arr, setStateArr] = useState(null);\r\n    let [allState_arr, setAllStateArr] = useState([])\r\n    let [countryName,setCourtryName] = useState(\"Israel\")\r\n\r\n    useEffect(() => {\r\n        \r\n        let url =\"https://restcountries.eu/rest/v2/name/\"+countryName+\"?fullText=true\"\r\n        if (props.match) {\r\n            if (props.match.params.name) {\r\n                url =\"https://restcountries.eu/rest/v2/name/\"+props.match.params.name+\"?fullText=true\"\r\n               \r\n            }\r\n            if (props.match.params.countryCode) {\r\n                url= \"https://restcountries.eu/rest/v2/alpha/\"+props.match.params.countryCode\r\n               \r\n            }\r\n        }\r\n\r\n            doApiGet(url)\r\n                // doApiGet(apiUrl + props.name)\r\n                .then(data => {\r\n                    // console.log(data);\r\n                    if(props.match.params.countryCode){\r\n\r\n                        setStateArr(data);\r\n                    }\r\n                    else{\r\n                        setStateArr(data[0]);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    alert(err)\r\n                    console.log(err)\r\n                })\r\n\r\n        }, [props.match])\r\n\r\n    useEffect(() => {\r\n        let url = \"https://restcountries.eu/rest/v2/all\"\r\n        doApiGet(url)\r\n            .then(data => {\r\n                setAllStateArr(data)\r\n            })\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container mt-3\">\r\n            {(state_arr)? <CountryItem  item={state_arr} allState_arr={allState_arr} />:\"Result Not Found\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Header from './header';\r\nimport Nav from './nav';\r\nimport Main from './main';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n\r\nfunction AppAtlas(props) {\r\n  \r\n    return (\r\n        <div >\r\n            <Router>\r\n                <Header />\r\n                <Nav/>\r\n                <Route exact path={\"/\"} component={Main} />\r\n                <Route exact path={\"/country/\"} component={Main}/>\r\n                <Route exact path={\"/country/:name\"} component={Main}/>\r\n                <Route exact path={\"/code/:countryCode\"} component={Main} />\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppAtlas\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport AppAtlas from './atlas_comps/appAtlas';\r\nimport AppMap from './atlas_comps/appMap';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <AppAtlas/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}